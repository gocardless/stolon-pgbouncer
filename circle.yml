---
version: 2

references:
  docker_build_image: &docker_build_image
    working_directory: /go/src/github.com/gocardless/stolon-pgbouncer
    docker:
      - image: &image gocardless/stolon-pgbouncer-circleci:2019071601
  docker_postgres_build_image: &docker_postgres_build_image
    working_directory: /go/src/github.com/gocardless/stolon-pgbouncer
    docker:
      - image: *image
        environment:
          PGHOST: "127.0.0.1"
          PGUSER: "postgres"
      - image: postgres:11.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: ""

jobs:
  build:
    <<: *docker_build_image
    steps:
      - checkout
      - run:
          name: Build test binaries
          command: make linux
      - persist_to_workspace:
          root: /go/src/github.com/gocardless/stolon-pgbouncer
          paths:
            - bin/stolon-pgbouncer.linux_amd64
            - bin/stolon-pgbouncer-acceptance.linux_amd64

  # Dependabot doesn't support vendoring module updates, so we use this CI step
  # to check we haven't updated our go.sum/go.mod without also vendoring the
  # dependencies.
  check-updated-vendor:
    <<: *docker_build_image
    steps:
      - checkout
      - run: GO111MODULE=on go mod vendor
      - run: GO111MODULE=on go mod tidy
      - run: |
          git config --global user.email "robot@gocardless.com"
          git config --global user.name "GoCardless Robot"

          if ! git diff --exit-code; then
            echo "vendor is out of date, please go mod vendor/tidy!"
            /bin/false
          fi

  # To understand this test flow, it's important to be aware of the following
  # constraints:
  #
  #   - Our Circle image needs to run as root to install system deps
  #   - GOPATH and GOROOT in the image are root owned, as is Ginkgo
  #   - PgBouncer fatals whenever running as uid 0
  #
  # In an attempt to satisfy these restrictions, we first build the ginkgo test
  # suites using the root user then invoke them as postgres. There are other
  # ways to achieve this but this seemed the least fiddly.
  unit-integration:
    <<: *docker_postgres_build_image
    steps:
      - checkout
      - run:
          name: Compile ginkgo test suites
          command: ginkgo build -r -race .
      - run:
          name: Run unit tests
          command: find pkg -type f -name '*.test' -printf "%h %f\n" | xargs -n2 sh -c 'cd $0 && su postgres -c ./$1'

  acceptance:
    machine: true
    working_directory: /home/circleci/stolon-pgbouncer
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/stolon-pgbouncer
      - run:
          name: Install an up-to-date Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start docker-compose cluster
          command: docker-compose up -d etcd-store sentinel pgbouncer keeper0 keeper1 keeper2
      - run:
          name: Tail logs from docker-compose
          command: docker-compose logs -f
          background: true
      - run:
          name: Run acceptance tests
          command: bin/stolon-pgbouncer-acceptance.linux_amd64

  release:
    <<: *docker_build_image
    steps:
      - setup_remote_docker
      - run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
      - checkout
      - run:
          name: Release
          command: |
            CURRENT_VERSION="v$(cat VERSION)"

            if [[ $(git tag -l "${CURRENT_VERSION}") == "${CURRENT_VERSION}" ]]; then
              echo "Version ${CURRENT_VERSION} is already released"
              exit 0
            fi

            git tag "${CURRENT_VERSION}"
            git push --tags

            goreleaser --rm-dist

workflows:
  version: 2
  build-integration:
    jobs:
      - unit-integration
      - build
      - check-updated-vendor
      - acceptance:
          requires:
            - build
      - release:
          requires:
            - acceptance
            - unit-integration
          filters:
            branches: {only: master}
